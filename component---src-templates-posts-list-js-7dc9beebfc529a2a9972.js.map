{"version":3,"sources":["webpack:///./src/components/TitlePage/styled.js","webpack:///./src/components/TitlePage/index.js","webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/PostListPreview/styled.js","webpack:///./src/components/PostListPreview/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/posts-list.js","webpack:///./config/constants.js"],"names":["TitleElement","styled","h1","media","greaterThan","TitlePage","props","text","category","memberColors","className","style","color","backgroundColor","PostItemLink","LocalizedLink","PostItemWrapper","section","PostItemImg","Img","PostItemInfo","div","PostItemTag","span","background","PostItemDate","time","PostItemTitle","PostItemDescription","p","PostItem","slug","date","title","timeToRead","description","image","listImages","useTranslations","toRead","useStaticQuery","postImgCover","edges","find","img","node","childImageSharp","fluid","src","includes","imgName","split","postImg","to","alt","ListWrapper","PostListPreview","postList","map","frontmatter","fields","key","PaginationWrapper","ul","lessThan","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","next","prev","of","query","Blog","data","allMarkdownRemark","pageContext","news","AN","TN","NS","HS","HT","TT","DTDP"],"mappings":"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","file":"component---src-templates-posts-list-js-7dc9beebfc529a2a9972.js","sourcesContent":["import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const TitleElement = styled.h1`\n  line-height: 140%;\n  font-size: 3rem;\n  font-weight: bold;\n  margin-bottom: var(--space-lg);\n\n  ${media.greaterThan('medium')`\n    line-height: 1.1;\n    font-size: 3.5rem;\n  `}\n\n  ${media.greaterThan('large')`\n    line-height: 1.1;\n    font-size: 4rem;\n  `}\n`;\n","import React from 'react';\nimport { memberColors } from '../../../config/constants';\n\nimport * as S from './styled';\n\nconst TitlePage = props => {\n  const { text, category } = props;\n\n  if (category in memberColors) {\n    return (\n      <S.TitleElement\n        className='p-4'\n        style={{color:'white', backgroundColor:memberColors[category]}}\n      >\n        {text}\n      </S.TitleElement>\n    );\n  } else {\n    return <S.TitleElement>{text}</S.TitleElement>;\n  }\n};\n\nexport default TitlePage;\n","import styled from 'styled-components';\nimport media from 'styled-media-query';\nimport Img from 'gatsby-image';\nimport LocalizedLink from '../LocalizedLink';\n\nexport const PostItemLink = styled(LocalizedLink)`\n  text-decoration: none;\n  display: block;\n  margin-bottom: var(--space);\n  color: black;\n  ${media.greaterThan('small')`\n    margin-bottom: 0;\n  `}\n  &:hover {\n    text-decoration: none;\n    color: #222;\n  }\n`;\n\nexport const PostItemWrapper = styled.section`\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: var(--bg-light);\n\n  /* .homepage & {\n    flex-direction: row;\n  } */\n`;\n\n// export const PostItemImg = styled.img`\n//   display: block;\n// `\n\nexport const PostItemImg = styled(Img)`\n  width: 100%;\n`;\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: calc(var(--space) * 1.5) var(--space);\n  position: relative;\n`;\n\nexport const PostItemTag = styled.span`\n  display: inline-block;\n  align-items: center;\n  background: ${props =>\n    props.background ? props.background : 'red'};\n  color: #fff;\n  font-size: 1.4rem;\n  font-weight: 700;\n  text-transform: uppercase;\n  padding: calc(var(--space-sm) / 1.5) var(--space-sm);\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n`;\n\nexport const PostItemDate = styled.time`\n  font-size: 1.4rem;\n  margin-bottom: var(--space-sm);\n`;\n\nexport const PostItemTitle = styled.h1`\n  font-size: 2rem;\n  font-weight: 700;\n  line-height: 140%;\n`;\n\nexport const PostItemDescription = styled.p`\n  margin-top: var(--space-sm);\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport useTranslations from '../useTranslations';\nimport { memberColors } from '../../../config/constants';\n\nimport * as S from './styled';\n\nconst PostItem = ({\n  slug,\n  background,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n  image,\n}) => {\n  const { toRead } = useTranslations();\n\n  const { listImages } = useStaticQuery(\n    graphql`\n      query {\n        listImages: allFile {\n          edges {\n            node {\n              childImageSharp {\n                fluid(maxWidth: 600, maxHeight: 350) {\n                  src\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const postImgCover = listImages.edges.find(img => {\n    return img.node.childImageSharp.fluid.src.includes('cover');\n  });\n\n  const imgName = image ? image.split('/')[3] : false;\n\n  const postImg = imgName\n    ? listImages.edges.find(img => {\n        return img.node.childImageSharp.fluid.src.includes(imgName);\n      })\n    : false;\n\n  return (\n    <S.PostItemLink to={slug}>\n      <S.PostItemWrapper>\n        {postImg && (\n          <S.PostItemImg\n            fluid={postImg.node.childImageSharp.fluid}\n            alt={title}\n          />\n        )}\n        {!postImg && (\n          <S.PostItemImg\n            fluid={postImgCover.node.childImageSharp.fluid}\n            alt={title}\n          />\n        )}\n\n        <S.PostItemInfo>\n          <S.PostItemTag background={background || memberColors[category]}>\n            {category}\n          </S.PostItemTag>\n          <S.PostItemDate>\n            {date} {/*• {timeToRead} min {toRead}*/}\n          </S.PostItemDate>\n          <S.PostItemTitle>{title}</S.PostItemTitle>\n          <S.PostItemDescription>{description}</S.PostItemDescription>\n        </S.PostItemInfo>\n      </S.PostItemWrapper>\n    </S.PostItemLink>\n  );\n};\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default PostItem;\n","import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const ListWrapper = styled.section`\n  margin-bottom: 20px;\n  ${media.greaterThan('small')`\n        display: grid;\n        grid-gap: 20px;\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    `}\n  ${media.greaterThan('large')`\n        grid-template-columns: repeat(auto-fit, minmax(250px, calc(50% - 10px)));\n    `}\n`;\n","import React from 'react';\nimport PostItem from '../PostItem';\n\nimport * as S from './styled';\n\nconst PostListPreview = ({postList}) => (\n    <S.ListWrapper>\n        {postList.map(\n          ({\n            node: {\n              frontmatter: {\n                background,\n                category,\n                date,\n                description,\n                title,\n                image,\n              },\n              timeToRead,\n              fields: { slug },\n            },\n          }) => (\n              <PostItem\n                slug={`/blog/${slug}`}\n                background={background}\n                category={category}\n                date={date}\n                timeToRead={timeToRead}\n                title={title}\n                description={description}\n                image={image}\n                key={slug}\n              />\n            ),\n        )}\n    </S.ListWrapper>\n)\n\nexport default PostListPreview;","import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const PaginationWrapper = styled.ul`\n  align-items: center;\n  border-top: 1px solid var(--borders);\n  color: var(--texts);\n  display: flex;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n  list-style: none;\n  ${media.lessThan('large')`\n    padding: 1rem;\n  `}\n\n  a {\n    color: var(--texts);\n    text-decoration: none;\n    transition: color 0.5s;\n    &:hover {\n      color: var(--highlight);\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport LocalizedLink from '../LocalizedLink';\nimport useTranslations from '../useTranslations';\n\nimport * as S from './styled';\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => {\n  const { next, prev, of } = useTranslations();\n\n  return (\n    <S.PaginationWrapper>\n      <li>\n        {!isFirst && (\n          <LocalizedLink to={prevPage}>← {prev}</LocalizedLink>\n        )}\n      </li>\n      <p>\n        {currentPage} {of} {numPages}\n      </p>\n      <li>\n        {!isLast && (\n          <LocalizedLink to={nextPage}>{next} →</LocalizedLink>\n        )}\n      </li>\n    </S.PaginationWrapper>\n  );\n};\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport PostListPreview from '../components/PostListPreview';\nimport TitlePage from '../components/TitlePage';\nimport SEO from '../components/seo';\nimport useTranslations from '../components/useTranslations';\n\nimport Pagination from '../components/Pagination';\n\nconst Blog = props => {\n  const postList = props.data.allMarkdownRemark.edges;\n\n  // Logic for Pagination Component\n  const { currentPage, numPages } = props.pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage =\n    currentPage - 1 === 1 ? '/blog' : `/blog/page/${currentPage - 1}`;\n  const nextPage = `/blog/page/${currentPage + 1}`;\n\n  const { news } = useTranslations();\n\n  return (\n    <>\n      <SEO title=\"Blog\" />\n      <TitlePage text={news} />\n\n      <PostListPreview postList={postList} />\n\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query PostsList($locale: String!, $dateFormat: String!, $skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: {fields: frontmatter___date, order: DESC}, \n      filter: { \n        fields: { locale: { eq: $locale } } \n        fileAbsolutePath: {regex: \"/(blog)\\/.*\\\\.md$/\"}\n      }\n      limit: $limit\n      skip: $skip\n    ){\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            category\n            background\n            image\n            date(formatString: $dateFormat)\n\n          }\n          timeToRead\n          fields {\n            locale\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Blog;\n","export const memberColors = {\n    AN: \"#32d14a\",\n    TN: \"#3272bf\",\n    NS: \"#e6c647\",\n    HS: \"#874f1e\",\n    HT: \"#e63125\",\n    TT: \"#e63125\",\n    DTDP: \"#9b34eb\",\n    \"Cha.Souer\": \"#111\",\n};"],"sourceRoot":""}