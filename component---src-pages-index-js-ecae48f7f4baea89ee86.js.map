{"version":3,"sources":["webpack:///./src/components/TitlePage/styled.js","webpack:///./src/components/TitlePage/index.js","webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/PostListPreview/styled.js","webpack:///./src/components/PostListPreview/index.js","webpack:///./src/pages/index.js","webpack:///./config/constants.js"],"names":["TitleElement","styled","h1","media","greaterThan","TitlePage","props","text","category","memberColors","className","style","color","backgroundColor","PostItemLink","LocalizedLink","PostItemWrapper","section","PostItemImg","Img","PostItemInfo","div","PostItemTag","span","background","PostItemDate","time","PostItemTitle","PostItemDescription","p","PostItem","slug","date","title","timeToRead","description","image","listImages","useTranslations","toRead","useStaticQuery","postImgCover","edges","find","img","node","publicURL","includes","imgName","split","postImg","to","fluid","childImageSharp","alt","ListWrapper","PostListPreview","postList","map","frontmatter","fields","key","Index","data","hello","subline","latestPosts","allPosts","allMarkdownRemark","doanImgFile","margin","AN","TN","NS","HS","HT","TT","DTDP","Announcements"],"mappings":"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","file":"component---src-pages-index-js-ecae48f7f4baea89ee86.js","sourcesContent":["import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const TitleElement = styled.h1`\n  line-height: 140%;\n  font-size: 3rem;\n  font-weight: bold;\n  margin-bottom: var(--space-lg);\n\n  ${media.greaterThan('medium')`\n    line-height: 1.1;\n    font-size: 3.5rem;\n  `}\n\n  ${media.greaterThan('large')`\n    line-height: 1.1;\n    font-size: 4rem;\n  `}\n`;\n","import React from 'react';\nimport { memberColors } from '../../../config/constants';\n\nimport * as S from './styled';\n\nconst TitlePage = props => {\n  const { text, category } = props;\n\n  if (category in memberColors) {\n    return (\n      <S.TitleElement\n        className='p-4'\n        style={{color:'white', backgroundColor:memberColors[category]}}\n      >\n        {text}\n      </S.TitleElement>\n    );\n  } else {\n    return <S.TitleElement>{text}</S.TitleElement>;\n  }\n};\n\nexport default TitlePage;\n","import styled from 'styled-components';\nimport media from 'styled-media-query';\nimport Img from 'gatsby-image';\nimport LocalizedLink from '../LocalizedLink';\n\nexport const PostItemLink = styled(LocalizedLink)`\n  text-decoration: none;\n  display: block;\n  margin-bottom: var(--space);\n  color: black;\n  ${media.greaterThan('small')`\n    margin-bottom: 0;\n  `}\n  &:hover {\n    text-decoration: none;\n    color: #222;\n  }\n`;\n\nexport const PostItemWrapper = styled.section`\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: var(--bg-light);\n\n  /* .homepage & {\n    flex-direction: row;\n  } */\n`;\n\n// export const PostItemImg = styled.img`\n//   display: block;\n// `\n\nexport const PostItemImg = styled(Img)`\n  width: 100%;\n`;\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: calc(var(--space) * 1.5) var(--space);\n  position: relative;\n`;\n\nexport const PostItemTag = styled.span`\n  display: inline-block;\n  align-items: center;\n  background: ${props =>\n    props.background ? props.background : 'red'};\n  color: #fff;\n  font-size: 1.4rem;\n  font-weight: 700;\n  text-transform: uppercase;\n  padding: calc(var(--space-sm) / 1.5) var(--space-sm);\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n`;\n\nexport const PostItemDate = styled.time`\n  font-size: 1.4rem;\n  margin-bottom: var(--space-sm);\n`;\n\nexport const PostItemTitle = styled.h1`\n  font-size: 2rem;\n  font-weight: 700;\n  line-height: 140%;\n`;\n\nexport const PostItemDescription = styled.p`\n  margin-top: var(--space-sm);\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport useTranslations from '../useTranslations';\nimport { memberColors } from '../../../config/constants';\n\nimport * as S from './styled';\n\nconst PostItem = ({\n  slug,\n  background,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n  image,\n}) => {\n  const { toRead } = useTranslations();\n\n  const { listImages } = useStaticQuery(\n    graphql`\n      query {\n        listImages: allFile {\n          edges {\n            node {\n              publicURL\n              childImageSharp {\n                fluid(maxWidth: 600, maxHeight: 350) {\n                  src\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const postImgCover = listImages.edges.find(img => {\n    return img.node.publicURL.includes('cover');\n  });\n\n  const imgName = image ? image.split('/')[3] : false;\n\n  const postImg = imgName\n    ? listImages.edges.find(img => {\n        return img.node.publicURL.includes(imgName);\n      })\n    : false;\n\n  return (\n    <S.PostItemLink to={slug}>\n      <S.PostItemWrapper>\n        {postImg && (\n          <S.PostItemImg\n            fluid={postImg.node.childImageSharp.fluid}\n            alt={title}\n          />\n        )}\n        {!postImg && (\n          <S.PostItemImg\n            fluid={postImgCover.node.childImageSharp.fluid}\n            alt={title}\n          />\n        )}\n\n        <S.PostItemInfo>\n          <S.PostItemTag background={background || memberColors[category]}>\n            {category}\n          </S.PostItemTag>\n          <S.PostItemDate>\n            {date} {/*â€¢ {timeToRead} min {toRead}*/}\n          </S.PostItemDate>\n          <S.PostItemTitle>{title}</S.PostItemTitle>\n          <S.PostItemDescription>{description}</S.PostItemDescription>\n        </S.PostItemInfo>\n      </S.PostItemWrapper>\n    </S.PostItemLink>\n  );\n};\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default PostItem;\n","import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const ListWrapper = styled.section`\n  margin-bottom: 20px;\n  ${media.greaterThan('small')`\n        display: grid;\n        grid-gap: 20px;\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    `}\n  ${media.greaterThan('large')`\n        grid-template-columns: repeat(auto-fit, minmax(250px, calc(50% - 10px)));\n    `}\n`;\n","import React from 'react';\nimport PostItem from '../PostItem';\n\nimport * as S from './styled';\n\nconst PostListPreview = ({postList}) => (\n    <S.ListWrapper>\n        {postList.map(\n          ({\n            node: {\n              frontmatter: {\n                background,\n                category,\n                date,\n                description,\n                title,\n                image,\n              },\n              timeToRead,\n              fields: { slug },\n            },\n          }) => (\n              <PostItem\n                slug={`/blog/${slug}`}\n                background={background}\n                category={category}\n                date={date}\n                timeToRead={timeToRead}\n                title={title}\n                description={description}\n                image={image}\n                key={slug}\n              />\n            ),\n        )}\n    </S.ListWrapper>\n)\n\nexport default PostListPreview;","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport SEO from '../components/seo';\nimport PostListPreview from '../components/PostListPreview';\nimport TitlePage from '../components/TitlePage';\nimport LocalizedLink from '../components/LocalizedLink';\nimport useTranslations from '../components/useTranslations';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Index = ({ data }) => {\n  // useTranslations is aware of the global context (and therefore also \"locale\")\n  // so it'll automatically give back the right translations\n  const {\n    hello,\n    subline,\n    category,\n    latestPosts,\n    allPosts,\n  } = useTranslations();\n\n  const postList = data.allMarkdownRemark.edges;\n\n  return (\n    <div className=\"homepage\">\n      <SEO title=\"Home\" />\n      <TitlePage text={hello} />\n      <p>{subline}</p>\n      <br />\n      <Img fluid={data.doanImgFile.childImageSharp.fluid} alt=\"image of doan\"/>\n\n      <hr style={{ margin: `2rem 0` }} />\n      <h1>\n        <strong>{latestPosts}</strong>\n      </h1>\n\n      <br />\n\n      <PostListPreview postList={postList} />\n\n      <br />\n\n      <LocalizedLink to={`/blog/`}>{allPosts}</LocalizedLink>\n    </div>\n  );\n};\n\nexport default Index;\n\nexport const query = graphql`\n  query Index($locale: String!, $dateFormat: String!, ) {\n    doanImgFile: file(base: {eq:\"doan-img.JPG\"}) {\n      base\n      childImageSharp {\n        fluid(maxWidth: 1040, quality: 90) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        fields: { locale: { eq: $locale } }\n        frontmatter: { category: { eq: \"Announcements\" } }\n        fileAbsolutePath: {regex: \"/(blog)\\/.*\\\\.md$/\"}\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 2\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            category\n            background\n            image\n            date(formatString: $dateFormat)\n\n          }\n          timeToRead\n          fields {\n            locale\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n","export const memberColors = {\n    AN: \"#32d14a\",\n    TN: \"#3272bf\",\n    NS: \"#e6c647\",\n    HS: \"#874f1e\",\n    HT: \"#e63125\",\n    TT: \"#e63125\",\n    DTDP: \"#9b34eb\",\n    \"Cha.Souer\": \"#111\",\n    Announcements: \"#353b48\",\n};"],"sourceRoot":""}